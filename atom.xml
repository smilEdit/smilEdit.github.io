<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smilEdit&#39;s Bolg</title>
  <subtitle>一直走，才能看到答案。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-16T14:05:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhanglf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sketch 初体验</title>
    <link href="http://yoursite.com/2017/04/16/sketch%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2017/04/16/sketch初体验/</id>
    <published>2017-04-16T12:55:17.000Z</published>
    <updated>2017-04-16T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://xclient.info/s/sketch.html#history_versions" target="_blank" rel="external"><em>下载这个软件</em></a> 的主要原因是因为这个软件的图标比较漂漂!</p>
<p>还有就是我也想体验下做设计的快感，啊哈哈。</p>
<p>趁着周末比较闲玩了半天左右(话说我…好像…平时也不忙)，期间参考了挺多的资料，稍微做点笔记。</p>
<a id="more"></a>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>先是了解下这个工具是干嘛用的，它的 <a href="https://www.zhihu.com/question/20715139" target="_blank" rel="external"><em>优缺点什么</em></a> 的，发现还是很有必要试试看的，然后大致看点基本操作。</p>
<p>比如 <a href="http://www.sketchcn.com/" target="_blank" rel="external">Sketch 中文网</a>，可是觉得看这种网站写的教程就和回到学生时代一样，看了几分钟就想睡觉。</p>
<p>太啰嗦了。</p>
<p>我还是先去看看大神做出来的 Demo 长什么样子，刺激下。然后逛了一圈 <strong><a href="https://www.sketchappsources.com/all-free-sources.html" target="_blank" rel="external">这里</a></strong>。</p>
<p>下了几个比较 <a href="https://www.sketchappsources.com/free-source/2563-flavr-recipes-app-ios-ui-kit-sketch-freebie-resource.html" target="_blank" rel="external">喜欢</a> 的风格。<br>例如:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%889.37.52.png" alt=""></p>
<p>用 Sketch 打开之后，简单的点了点各个所谓的 <a href="http://www.jianshu.com/p/c7eb767308ed" target="_blank" rel="external">Artboard</a> ，原来就是拷贝来拷贝去的，然后图层叠加。好像比写代码轻松多了啊，我当时那么想。</p>
<p>工具总体的使用相对比较简单吧，最主要还是看设计的。</p>
<h3 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h3><p>然后我就想着先设计几个简单但是要有点创意的界面，先从登录开始设计吧…</p>
<p>然后几分钟过去了… </p>
<p>又几分钟过去了…</p>
<p>。。。</p>
<p>好吧，我放弃了。</p>
<p>我觉得这么出名的软件插件一定不少，搜下了。</p>
<p>找了几个比较常用的。</p>
<ul>
<li>用来批量命名的 <a href="https://github.com/rodi01/RenameIt" target="_blank" rel="external">RenameIt</a></li>
<li>用来随机加载图片的(感觉这个有点厉害) <a href="https://github.com/timuric/Content-generator-sketch-plugin" target="_blank" rel="external">Content-generator-sketch-plugin</a></li>
<li>用来标记尺寸的 <a href="https://github.com/utom/sketch-measure" target="_blank" rel="external">sketch-measure</a></li>
<li>用来做注释的 <a href="https://github.com/marcosvidal/Sketch-Notebook" target="_blank" rel="external">Sketch-Notebook</a></li>
</ul>
<p>安装方式很简单，就是从 Github 上面把文件下载下来，然后丢 Sketch 的 Plugins 的文件夹下面就行了。</p>
<p>你也可以这样找到那个文件夹:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%889.17.23.png" alt=""></p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%889.17.33.png" alt=""></p>
<p>我的那几个都是放进去立马就生效了，都不用重启，很酷哦。</p>
<p>使用也很简单，比如那个加载图形的插件，你先画个图形做载体，然后像下图那样选一下要加载的内容就好(女的都没几个漂亮的啊，喂)。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%889.21.52.png" alt=""></p>
<p>我看了会儿极客上个一个简单的 <a href="http://www.jikexueyuan.com/course/704_6.html?ss=1" target="_blank" rel="external">视频教程</a>，他做了两个界面，他做的很丑。像这样:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%889.25.31.png" alt=""></p>
<p>我很鄙视，然后我也做了个差不多的。</p>
<p>。。。</p>
<p>。。。</p>
<p>可是更丑，虽然做起来很快。像这样:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-16%20%E4%B8%8B%E5%8D%888.59.23.png" alt=""></p>
<p>那堆图片的命名我就是用那个 RenameIt 插件命名的，使用很简单，选好那堆图片然后点插件，输入 Img%n 就好了。</p>
<p>原型图的制作工具操作起来应该更简单。</p>
<p>但是问题来了，无论是设计图或者原型图，本来制作的难点就和工具操作的难易程度几乎没有关系。</p>
<p>原型图的重点是需求的体现，设计的重点是总整风格的把控和更加友好的交互。(当然，这只是一名非常普通的开发者的看法)</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>还是敲代码有意思。</p>
<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=253338849,3188989570&amp;fm=21&amp;gp=0.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://xclient.info/s/sketch.html#history_versions&quot;&gt;&lt;em&gt;下载这个软件&lt;/em&gt;&lt;/a&gt; 的主要原因是因为这个软件的图标比较漂漂!&lt;/p&gt;
&lt;p&gt;还有就是我也想体验下做设计的快感，啊哈哈。&lt;/p&gt;
&lt;p&gt;趁着周末比较闲玩了半天左右(话说我…好像…平时也不忙)，期间参考了挺多的资料，稍微做点笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="设计" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>安卓桌面图标未读数字</title>
    <link href="http://yoursite.com/2017/04/15/%E5%AE%89%E5%8D%93%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E6%9C%AA%E8%AF%BB%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2017/04/15/安卓桌面图标未读数字/</id>
    <published>2017-04-15T08:58:12.000Z</published>
    <updated>2017-04-15T09:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>再不写个安卓技术文，都要忘了自己其实是做安卓的了。</p>
<p><img src="http://imgsrc.baidu.com/forum/w%3D580/sign=b8700c65494a20a4311e3ccfa0539847/d2198e16fdfaaf5108b8d5c88a5494eef01f7a74.jpg" alt=""></p>
<p>今天要是实现的就是这种东西</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-15%20%E4%B8%8B%E5%8D%885.06.07.png" alt=""></p>
<a id="more"></a>
<p>说实话，有点恶心。每次支付宝微信什么的这种未读标志出现的时候就忍不住去点。</p>
<p>好了，我的学习流程是这样的，先在网上搜了下:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-15%20%E4%B8%8B%E5%8D%885.09.51.png" alt=""></p>
<p>看了几篇之后，发现 <a href="http://www.jianshu.com/p/0992ff9eeeb6" target="_blank" rel="external"><em>这个</em></a> 写的比较用心，除了无形狗粮。</p>
<p>然后找到了 Github 上面的 <a href="https://github.com/leolin310148/ShortcutBadger" target="_blank" rel="external"><em>这个</em></a>，应该是用的人最多的了。</p>
<p>使用起来非非常的方便:</p>
<p>新建了个工程，在布局中简单写了两个 <code>Button</code> ，一个用来添加未读的标志，一个用来消除未读的标记。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"addCount"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bt_addCount"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"removeCount"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bt_removeCount"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>然后在代码中添加按钮的点击事件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mBtAddCount = (Button) findViewById(R.id.bt_addCount);</div><div class="line">        mBtAddCount.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (ShortcutBadger.isBadgeCounterSupported(getApplicationContext())) &#123;</div><div class="line">                    ShortcutBadger.applyCount(getApplicationContext(),<span class="number">1</span>);</div><div class="line">                    Toast  toast = Toast.makeText(getApplicationContext(),<span class="string">"标记已添加"</span>,Toast.LENGTH_SHORT);</div><div class="line">                    toast.show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mBtRemove = (Button) findViewById(R.id.bt_removeCount);</div><div class="line">        mBtRemove.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (ShortcutBadger.isBadgeCounterSupported(getApplicationContext())) &#123;</div><div class="line">                    ShortcutBadger.removeCount(getApplicationContext());</div><div class="line">                    Toast  toast = Toast.makeText(getApplicationContext(),<span class="string">"标记已清除"</span>,Toast.LENGTH_SHORT);</div><div class="line">                    toast.show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>灰常快，然后在真机上试了下，能用。（手头只有自己使用的手机，华为荣耀 6。）</p>
<p>再然后，看源码。</p>
<p>怎么说呢，可以这样理解。桌面屏幕其实也是个 Activity 界面，是一个类，Launcher 。修改桌面图标其实就是传一些参数进去，然后调用里面的修改图标的方法。(这个方法各个厂商的实现方式可能都是不一样的，原生其实是没有的，因为有强大的通知栏了，为何要整这种逼死强迫症的东西呢)</p>
<p>需要的参数有包名，类名，和想要设置的数字。移除标志其实就是数字传 0。</p>
<p>不依赖三方库，我自己实现了下，像这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent launchIntent = getApplicationContext().getPackageManager().getLaunchIntentForPackage(getApplicationContext().getPackageName());</div><div class="line">Bundle localBundle = <span class="keyword">new</span> Bundle();</div><div class="line">localBundle.putString(<span class="string">"package"</span>, getApplicationContext().getPackageName());</div><div class="line">localBundle.putString(<span class="string">"class"</span>, launchIntent.getComponent().getClassName());</div><div class="line">localBundle.putInt(<span class="string">"badgenumber"</span>, <span class="number">1</span>);</div><div class="line">getApplicationContext().getContentResolver().call(Uri.parse(<span class="string">"content://com.huawei.android.launcher.settings/badge/"</span>), <span class="string">"change_badge"</span>, <span class="keyword">null</span>, localBundle);</div></pre></td></tr></table></figure>
<p>运行了下，妥妥的。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-15%20%E4%B8%8B%E5%8D%885.06.20.png" alt=""></p>
<p>烦在哪里呢，安卓严重的碎片化。不同牌子的实现方式就都不一样了，上面只是华为的。</p>
<p>有的手机，例如锤子之类的，只有 System App 才能改。</p>
<p>ShortcutBadger 就是对市场上的绝大多数品牌的手机做了适配。一般手机的实现方式都和上面华为那个差不多，传参数调接口就行了。具体可以看<a href="https://github.com/leolin310148/ShortcutBadger/tree/master/ShortcutBadger/src/main/java/me/leolin/shortcutbadger/impl" target="_blank" rel="external"><em>这里</em></a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再不写个安卓技术文，都要忘了自己其实是做安卓的了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://imgsrc.baidu.com/forum/w%3D580/sign=b8700c65494a20a4311e3ccfa0539847/d2198e16fdfaaf5108b8d5c88a5494eef01f7a74.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天要是实现的就是这种东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-15%20%E4%B8%8B%E5%8D%885.06.07.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="安卓" scheme="http://yoursite.com/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="安卓" scheme="http://yoursite.com/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>我的梦想</title>
    <link href="http://yoursite.com/2017/04/15/%E6%88%91%E7%9A%84%E6%A2%A6%E6%83%B3/"/>
    <id>http://yoursite.com/2017/04/15/我的梦想/</id>
    <published>2017-04-15T05:13:28.000Z</published>
    <updated>2017-04-15T05:22:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><br></p>
<p><br><br><br><br><br></p>
<a id="more"></a>
<center>养两只猫，一只灰色的，一只白色的</center>

<p><br><br><br></p>
<p><br><br><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="梦想" scheme="http://yoursite.com/categories/%E6%A2%A6%E6%83%B3/"/>
    
    
      <category term="梦想" scheme="http://yoursite.com/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>周末停水</title>
    <link href="http://yoursite.com/2017/04/15/%E5%91%A8%E6%9C%AB%E5%81%9C%E6%B0%B4/"/>
    <id>http://yoursite.com/2017/04/15/周末停水/</id>
    <published>2017-04-15T04:37:32.000Z</published>
    <updated>2017-04-15T05:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>好不容易周末了。</p>
<p>居然停水了。</p>
<div align="center"><br> <img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=98a158584f10b912bf94fef8f3cdd03b/9a504fc2d5628535b06dcdc298ef76c6a6ef6347.jpg" width="200" height="200" alt="图片名称" align="center"><br> </div>


<a id="more"></a>
<p>都不能好好煮饭做菜了。</p>
<p>拉屎都要出去拉。</p>
 <div align="center"><br> <img src=" http://img2.imgtn.bdimg.com/it/u=146946539,2154009609&fm=11&gp=0.jpg" width="200" height="200" alt="图片名称" align="center"><br> </div>

<p>昨晚太累太忙了估计是，虽然看到了楼下的通知，但是忘记屯水了。</p>
<p>9 点到 5 点停水，只能是做晚饭了。</p>
<p>一般是周末的时候煮点不错的汤，好好补补的。</p>
<p>另外，早上骑车出去买菜的时候，看到</p>
<div align="center"><br> <img src=" https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=320948557,2220721548&fm=23&gp=0.jpg" width="200" height="200" alt="图片名称" align="center"><br> </div>

<p>漫天柳树精子，一不小心还吸到鼻子里面，蓝瘦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好不容易周末了。&lt;/p&gt;
&lt;p&gt;居然停水了。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=98a158584f10b912bf94fef8f3cdd03b/9a504fc2d5628535b06dcdc298ef76c6a6ef6347.jpg&quot; width = &quot;200&quot; height = &quot;200&quot; alt=&quot;图片名称&quot; align=&quot;center&quot; /&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="宅家" scheme="http://yoursite.com/tags/%E5%AE%85%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>4月随想</title>
    <link href="http://yoursite.com/2017/04/14/4%E6%9C%88%E9%9A%8F%E6%83%B3/"/>
    <id>http://yoursite.com/2017/04/14/4月随想/</id>
    <published>2017-04-14T13:12:36.000Z</published>
    <updated>2017-04-15T05:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这算是第一次在网上写自己的感想吗？ </p>
<p>我想了想。</p>
<p>不算。 </p>
<p>好歹我中学的也是玩过 QQ 空间的，写过不少日志。 </p>
<div align="center"><br> <img src="http://img3.imgtn.bdimg.com/it/u=3471221132,3526623089&fm=23&gp=0.jpg" width="100" height="100" alt="图片名称" align="center"><br> </div>

<a id="more"></a>
<p>说是 4 月随想，没准我会连小学 5 年级同桌还欠我一包辣条的事情给说出来，当然，我不会。</p>
<div align="center"><br> <img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/eac4b74543a982269501bfb98e82b9014b90eb68.jpg" width="100" height="100" alt="图片名称" align="center"><br> </div><br><!--more--><br>去年发生了太太多事情了(相比我约前 1/4 的平淡人生)，算的上是人生路上的事故多发地段了。也说的上是实现小时候的一小半梦想了吧。<br><br>通过自己的努力成为一个拿着固定工资，基本能够养活自己，做着自己喜欢的工作，周末偶尔还能出去逛逛。(本来不怎么样的心情，写着写着咋感觉自己也不算差呢，有点小激动)<br><br>是的，突然就膨胀了。<br><br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5d8bad5a35adcbef016176009c9f02e5/a1ec08fa513d2697d4c79cc351fbb2fb4316d81c.jpg" alt=""><br><br>言归正传，从 3 月上海离职回福建老家，吃我妈妈煮的很好吃的菜吃了半个月，4 月来杭州，面试 2 家公司都运气很好的拿到了 offer ，然后顺利入职，再到和朋友一起在一小区还不错的两室一厅合租。这一切对于身心处于发育阶段的我来说<br><br><img src="http://pic.9ht.com/up/2016-1/14541223419540327.jpg" alt=""><br><br>不可思议。<br><br>此刻住在早上被太阳照醒的小区，不由想起前半年在上海，半夜被左边那个疯子般喝多了酒的邻居(整夜神经病式的激光枪般爆粗口哒哒不休)和右边那个好像男朋友很多的女邻居(偶尔半夜嗷嗷嗯嗯欲要还羞实着浪个不停)，支配的恐惧。<br><br>我的语文老师教的好，其实不用括号和逗号也并没有什么问题，但是为了方便阅读，我加了，很酷。<br><br>关键屋子地方唯一的通风口还对着下水道，从那跑进屋子的老鼠如果是母的估计已经生小宝宝了，我的米和苹果没有白喂。<br><br>这么看来我也是个有点曲折经历的男人了。<br><br><div align="center"><br> <img src="http://pics.sc.chinaz.com/Files/pic/faces/3894/5.jpg" width="200" height="200" alt="图片名称" align="center"><br> </div>

<p>虽然离开上海的时候，它并没有给我留下什么好的印象，但是现在还是挺怀念那个不算很小的团队的。</p>
<p>估计我最佩服就是那个设计了，一人担起 3 个还是 4 个应用的 PC 和移动端的设计。虽然给我的都是 IOS 的图，但是看到他手里拿着 Nexus 手机，和我说起 Material Design 头头是道，真是一把辛酸泪。虽然不是很懂设计在干嘛，但是我还是觉得这人战斗力不弱。</p>
<p>关于设计，下午琢磨了半天的 Sketch ，我想这个周末随便整个记事类型的 App 试试。</p>
<div align="center"><br> <img src="http://img0.imgtn.bdimg.com/it/u=3690421109,3821191199&fm=23&gp=0.jpg" width="200" height="200" alt="图片名称" align="center"><br> </div>

<p>其实小团队相对来说效率还是很高的，不开过多的会议，半年的时间我参加了不到 5 次。当然效率和开会关系不大，根本不差那点时间，但是这是一个体制的问题，为什么开会多，那是因为决定权往往不是在一个人手里，那是因为大家都相信通过讨论事情能有更好的解决方案。</p>
<p>几乎什么问题都要讨论，没有办法就是这样。</p>
<p><strong>黑客与画家</strong> 中的主角，刚好下午看到那章，他最开始所在的公司 Viaweb。一共就 3 个人。一个界面，一个后台，一个管理，一个用 C 和 C++，一个用 Perl，一个用 Python，一同开发一款互联网服务的产品。后来被雅虎以不低的价格收购了，之后他在感受到了大公司的做派，很不适应。</p>
<p>他还说了个 <a href="http://baike.baidu.com/link?url=SGXnIqr8q-hc7M93XB8b7yEIQ82K45H8qfxHJFrvVv6hkFoM-gVTi_WCC7ckbBe0FgQ_YAazQvMWVwKQbGCywdm9a7m2Hr2ySwkO9fnv-2XV7PqKKAVR9ZsPQ-QRWyd9" target="_blank" rel="external">人月神话</a> 中的事，10 个人一个月可以做完的事，可能 20 个人半个月可以做完，30 个人可能要两个月，100 人估计一年都完成不了。 </p>
<p>这事估计包工头是搞不拎清的，但是管技术的都懂。</p>
<p>当然我是没有这种烦恼，毕竟我现在也算是自己负责一个 App。</p>
<div align="center"><br> <img src="http://img5.imgtn.bdimg.com/it/u=1707114256,3473739083&fm=23&gp=0.jpg" width="300" height="200" alt="图片名称" align="center"><br> </div>

<p>估计我是离题了。</p>
<p>小时候，可能是智力小游戏玩多了，现在脑子有点不大好使。也有可能是大学的时候 LOL 玩多了，</p>
<p>屁嘞，皮肤抽了一堆，排位一共还没玩 20 把，</p>
<p>哦，那可能是大乱斗和无限火力玩傻了。</p>
<p>大学，在做图书馆管理员的那段日子，应该是书看多了，放下了游戏，看起了单片机。</p>
<p>也不知道脑子是瓦特了还是又进水了，那个寒假买了万能表和电烙铁等一堆装备半夜在家焊电路。看着郭天祥的 10 天学会 51 单片机想着我可能可以在那板子上跑个小游戏。</p>
<p>事实证明：</p>
<p><img src="http://img0.imgtn.bdimg.com/it/u=1191114715,1311049547&amp;fm=23&amp;gp=0.jpg" alt=""></p>
<p>现在在公司暂时我还是挺没事做的。当然我说的事仅仅指的是公司分配的任务，自己要做的事还是一大堆。</p>
<p>例如现在是周五晚上 11 点，我居然在写这个可能是没有意义的东西。像这种事，可能我可以循环几个月。</p>
<p>所以我给自己定了一个更加无聊的小目标。</p>
<p>每周不论是随笔，随想或者是电影观后感，书籍读后感。以上选一个整理出来。要发博客才算。(我会告诉你我换了新住址之后心情好的每天都自己写日记吗)</p>
<p>每天记录 5 个技术型的单词，例如，今天的单词是 <strong>eliminate</strong>，<strong>obscure</strong>，<strong>anticipate</strong>，<strong>allocation</strong>，<strong>concrete</strong>。苹果的小伙伴注意，小技巧，选择单词，然后 command + shift + y ，一般人我不告诉他。</p>
<p><img src="http://img1.imgtn.bdimg.com/it/u=2539876683,45375580&amp;fm=23&amp;gp=0.jpg" alt=""></p>
<p>每周回答两个知乎问题。抖机灵也好，一本正经也好。对于什么论坛什么社区的潜水的我来说，是该上去换换气了。先从它开始。</p>
<p>扇贝英语打卡就不说了，今天第 700 天了，断不了的。我可能又是有点膨胀。</p>
<p>关于尤克里里，一周一个新曲肯定不行，一段还是可以的。其实这个不用定目标，也会弹的。因为手机和电脑都没有游戏了，弹琴估计是我唯一的放松方式。</p>
<p>不对，还有做菜。做菜的时候也放松。</p>
<p>一周尝试一道新菜吧。哈哈。含着泪吃下去。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这算是第一次在网上写自己的感想吗？ &lt;/p&gt;
&lt;p&gt;我想了想。&lt;/p&gt;
&lt;p&gt;不算。 &lt;/p&gt;
&lt;p&gt;好歹我中学的也是玩过 QQ 空间的，写过不少日志。 &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt; &lt;img src=&quot;http://img3.imgtn.bdimg.com/it/u=3471221132,3526623089&amp;fm=23&amp;gp=0.jpg&quot; width = &quot;100&quot; height = &quot;100&quot; alt=&quot;图片名称&quot; align=&quot;center&quot; /&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="个人随想" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用技巧</title>
    <link href="http://yoursite.com/2017/04/14/Mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/04/14/Mac使用技巧/</id>
    <published>2017-04-14T03:07:21.000Z</published>
    <updated>2017-04-14T08:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>新版 MacPro</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8A%E5%8D%8811.14.37.png" alt=""></p>
<p> 入手 3 月多了。 简单说说使用的心得，好用的软件和一些小技巧吧。</p>
<h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><h3 id="Dock"><a href="#Dock" class="headerlink" title="Dock"></a>Dock</h3><p>在没用 Mac 之前，在 Window 系统上我就用了 <a href="http://www.ouyaoxiazai.com/soft/stgj/14/19457.html" target="_blank" rel="external">RocketDock</a> ，可山寨终究是山寨啊。</p>
<p>不过相对来说原生的 Dock 自定义性不强，怎么改都不满意。</p>
<p>在个时候就需要 <a href="http://xclient.info/s/cdock.html" target="_blank" rel="external">cDock2</a>了。</p>
<a id="more"></a>
<p>先来张图预览下:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8A%E5%8D%8811.34.35.png" alt=""></p>
<p>虽然总体区别不大，但是还是有些细节差别的。</p>
<p>更有立体感了，打开的应用会有倒影。这些通过 <a href="http://w0lfschild.github.io/app_cDock.html" target="_blank" rel="external">cDock2</a> 都是可以调整的，具体的自己调整一下就知道了。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8A%E5%8D%8811.38.21.png" alt=""></p>
<p>使用该软件之前，有几个步骤要走(软件上本来就有指导)</p>
<ol>
<li>重启 MAC。</li>
<li>按住 command + R 不动，直到 OS X 实用工具页面出现。</li>
<li>菜单上选择实用工具 -&gt; 终端</li>
<li><p>在出现的控制台窗口中输入如下命令并敲回车: </p>
<p>   csrutil disable</p>
</li>
<li>重启 MAC</li>
<li>正常进入 OS X 系统，使用 cDock2 设置 dock 样式</li>
<li>设置好后，继续重启 MAC ，按住 command + R 不动，直到 OS X 实用工具页面出现。</li>
<li><p>这次输入如下命令并敲回车：</p>
<p>   csrutil enable</p>
</li>
</ol>
<p>要是还不行，自行 <strong><a href="https://www.baidu.com/baidu?tn=64075107_1_dg&amp;ie=utf-8&amp;wd=cdock2" target="_blank" rel="external">百度</a></strong> 或 <strong><a href="https://www.google.co.jp/search?q=cdock2&amp;oq=cdock2&amp;gs_l=serp.3...51948.51948.0.52153.1.1.0.0.0.0.0.0..0.0....0...1.1.64.serp..1.0.0.3W9PtJ0bW7Q" target="_blank" rel="external">Google</a></strong> 。</p>
<p>另外还有图标的修改，也挺有意思的，之前的图片中也可以看出，我改了 Finder 和 Sublime 的图标。</p>
<p>图标的来源可以参考 <a href="https://dribbble.com/search?q=mac+icon" target="_blank" rel="external">这里</a> 。</p>
<p>修改的过程很简单，自己 <strong><a href="http://jingyan.baidu.com/article/e5c39bf5baa1e639d6603355.html" target="_blank" rel="external">搜下</a></strong> 就有了。</p>
<p>有一点要注意下，修改了图标之后，可能并不会马上生效，不要慌，重启下软件可能就好了。</p>
<h3 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h3><p>推荐个软件 <a href="http://arkanath.com/FreshBackMac/" target="_blank" rel="external">FreshBackMac</a> 。 很小，3M 左右，不用安装，点击就可以用了。</p>
<p>可以设置更新频率，图片内容，来源等等。。。</p>
<p>一个字，好用。</p>
<p>当然，如果刚好看到特别喜欢的桌面，也可以下载保存下来。</p>
<p>分享几张个人比较喜欢的图片。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/macbook_pro_3-wallpaper-2560x1600.jpg" alt="图1"></p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/bg-1.jpg" alt="图2"></p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/Unsplash%20Source.jpg" alt="图3"></p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/macbook_triangles-wallpaper-1680x1050.jpg" alt="图4"></p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/apple_leather_2-wallpaper-1680x1050.jpg" alt="图5"></p>
<h3 id="终端配色"><a href="#终端配色" class="headerlink" title="终端配色"></a>终端配色</h3><p>我用的是 <a href="http://iterm2.com/" target="_blank" rel="external">iTerm2</a>  </p>
<p>它有什么用就不<strong><a href="https://www.zhihu.com/question/27447370" target="_blank" rel="external">多说</a></strong>了。</p>
<p>配色方案很多，可以参考 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="external">这里</a>。</p>
<p>为了方便使用，可以设置全局 <em>热键</em> ，瞬间呼出。</p>
<p>iTerm2 -&gt; Preferences -&gt; Appearance -&gt; Hotkey -&gt; Check “Show/hide iTerm2 with a system-wide hotkey”</p>
<p>然后设置新窗口的布局，让它半透明之类的(看你喜欢),占据你的半个屏幕之类的(看你喜欢),出现在顶端。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8B%E5%8D%881.32.01.png" alt=""></p>
<p>最后为了使用更酷，使用它的时候不让它出现在 Dock 上面:</p>
<p>执行:</p>
<p> <code>/usr/libexec/PlistBuddy -c &quot;Add :LSUIElement bool true&quot; /Applications/iTerm.app/Contents/Info.plist</code></p>
<p>然后重启 iTerm2 就行了。</p>
<p>想要恢复的话，执行:</p>
<p><code>/usr/libexec/PlistBuddy -c &quot;Delete :LSUIElement&quot; /Applications/iTerm.app/Contents/Info.plist</code></p>
<p>说几个常用的快捷键:</p>
<ul>
<li>command + d / command + shift + d 横竖分屏</li>
<li>command + option + 方向键 在分屏中切屏</li>
<li>command + ; 自动补全 </li>
<li><p>command + shift + h 历史记录</p>
<p>…</p>
</li>
</ul>
<h2 id="高效软件"><a href="#高效软件" class="headerlink" title="高效软件"></a>高效软件</h2><h3 id="Contexts"><a href="#Contexts" class="headerlink" title="Contexts"></a><a href="http://xclient.info/s/contexts.html" target="_blank" rel="external">Contexts</a></h3><p>第一个必须是它。</p>
<p>我 13 寸的 MacPro 肯定是没有地盘一直显示 Dock 了，所以都是自动隐藏的。</p>
<p>每次 command + m 一个软件之后，就想着有什么方法可以不用鼠标点 Dock 的情况下唤起缩小过后的程序。(用 command + tab 一个个切换太笨拙了 )</p>
<p>答案就是 <strong>Contexts</strong> ，两个字，非常棒。</p>
<p>当然，可能会有按键冲突，那么就在 设置 → Panel → Switch by window number 中，可以更改根据编号切换窗口的快捷键。</p>
<p>具体可以看这里的 <em><a href="https://sspai.com/post/32468?utm_medium=referral&amp;utm_source=tuicool" target="_blank" rel="external">详细攻略</a></em>。</p>
<h3 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a><a href="https://github.com/MacDownApp/macdown" target="_blank" rel="external">MacDown</a></h3><p> 用了几个 MarkDown 的编辑器或者插件之后觉得这个最为简洁直观。</p>
<p> 常用快捷键在 Format 里，command + 一些首字母，比较少，基本都是很常用的。</p>
<p> 代码的话除了 double `。</p>
<p> 还可以使用 6 个 ` 中间加语言类型。 </p>
<p> 不管他是不是盗版还是啥的，还是支持下开源。</p>
<h3 id="BetterTouchTool"><a href="#BetterTouchTool" class="headerlink" title="BetterTouchTool"></a>BetterTouchTool</h3><p><em>待更新…</em></p>
<h3 id="Alfred-3"><a href="#Alfred-3" class="headerlink" title="Alfred 3"></a>Alfred 3</h3><p><em>待更新…</em></p>
<h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><h3 id="XX-net"><a href="#XX-net" class="headerlink" title="XX-net"></a><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="external">XX-net</a></h3><p>开源没有流量限制，搭配 Chrome 使用更好。</p>
<p>整体速度较快，但是不稳定。</p>
<p>具体配置 <a href="https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3" target="_blank" rel="external">文档</a> 里已经说的非常清楚了。</p>
<h3 id="影梭"><a href="#影梭" class="headerlink" title="影梭"></a><a href="https://www.shadowshocks.com/" target="_blank" rel="external">影梭</a></h3><p>我用的是 99/年的，用了半年多了，前几个月一般般，后几个月根本上不了网。</p>
<p>太坑了，价格低质量差？</p>
<p>配置不算难，但是有点蠢，下个客户端，一个一个的加代理服务器地址。</p>
<p>用的时候最好是看看哪个延时低用哪个，很无语。</p>
<h3 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a><a href="https://github.com/getlantern/lantern" target="_blank" rel="external">lantern</a></h3><p>基础版免费有限制，不过流量不是很少，整体速度一般，但是相对稳定。</p>
<p>使用特特别简单，双击。</p>
<h2 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h2><h3 id="关于翻译"><a href="#关于翻译" class="headerlink" title="关于翻译"></a>关于翻译</h3><p>英语不好真是够呛的</p>
<h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>三指轻触取词:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8B%E5%8D%883.55.07.png" alt=""></p>
<p>设置也挺方便的:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8B%E5%8D%883.50.37.png" alt=""></p>
<p>讲道理整个系统通用的，但是相对有时候取的范围不大准，所以一些软件还是有必要在搞些别的。</p>
<h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p><a href="https://chrome.google.com/webstore/detail/halo-word-dictionary/bhkcehpnnlgncpnefpanachijmhikocj" target="_blank" rel="external">Halo Word Dictionary</a></p>
<p>按住 command 键取词就行了。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8B%E5%8D%883.56.54.png" alt=""></p>
<h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><p>command + shift + a 输入 plug ,</p>
<p>下载 ECTranslation 翻译插件，可能要重启生效。</p>
<p>command + , (在 Mac 上基本所有的软件的设置快捷都是这个)输入 keymap 搜索 translate ,找到后自己选个不冲突的全局快捷键就好了。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8B%E5%8D%884.22.32.png" alt=""><br><br><br><br><br><br><br><br></p>
<p>   <em>未完待续…</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新版 MacPro&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-14%20%E4%B8%8A%E5%8D%8811.14.37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 入手 3 月多了。 简单说说使用的心得，好用的软件和一些小技巧吧。&lt;/p&gt;
&lt;h2 id=&quot;外观&quot;&gt;&lt;a href=&quot;#外观&quot; class=&quot;headerlink&quot; title=&quot;外观&quot;&gt;&lt;/a&gt;外观&lt;/h2&gt;&lt;h3 id=&quot;Dock&quot;&gt;&lt;a href=&quot;#Dock&quot; class=&quot;headerlink&quot; title=&quot;Dock&quot;&gt;&lt;/a&gt;Dock&lt;/h3&gt;&lt;p&gt;在没用 Mac 之前，在 Window 系统上我就用了 &lt;a href=&quot;http://www.ouyaoxiazai.com/soft/stgj/14/19457.html&quot;&gt;RocketDock&lt;/a&gt; ，可山寨终究是山寨啊。&lt;/p&gt;
&lt;p&gt;不过相对来说原生的 Dock 自定义性不强，怎么改都不满意。&lt;/p&gt;
&lt;p&gt;在个时候就需要 &lt;a href=&quot;http://xclient.info/s/cdock.html&quot;&gt;cDock2&lt;/a&gt;了。&lt;/p&gt;
    
    </summary>
    
      <category term="高效做事" scheme="http://yoursite.com/categories/%E9%AB%98%E6%95%88%E5%81%9A%E4%BA%8B/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>网络传输基础</title>
    <link href="http://yoursite.com/2017/04/10/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93/"/>
    <id>http://yoursite.com/2017/04/10/网络传输/</id>
    <published>2017-04-10T12:52:04.000Z</published>
    <updated>2017-04-13T12:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="五层模型"><a href="#五层模型" class="headerlink" title="五层模型"></a>五层模型</h3><p>相比 OSI 的 7 层参考模型，为了更加高效的开发，TCP/IP 使用了 4 层参考模型。</p>
<p>但是一般为了介绍方便，一般采用 5 层协议。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/1-150526093225401.png" alt=""></p>
<p>为何协议，协议就是大家都遵守的规则，所有的这些协议统称为<strong>互联网协议</strong>。<br><a id="more"></a><br>每层模型都有属于自己的协议，协议各式各样，有的是为了数据能找到目的地址，有的是为了保证源数据的完整性，有的是当发送失败的重发使用等等。</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/231055580455666.jpg" alt=""></p>
<p>发送数据的时候至上而下经过层层模型，经过每层模型的时候都会在数据中加点本层模型的内容，层层封装之后发送到另一个主机上。</p>
<p>就像是买了个小礼品，包装了一层一层，最后写上收件人交给邮递员，历经万水千山，收件人拿到了快递，再一层一层的拆包装，最后才能看到里面的小礼品。</p>
<p>对的，就算你在 QQ 上发了一个句号给你的朋友，这个句号也要这样经过层层封装，在网络中不断辗转。</p>
<p>下面就主要介绍一下每层之中重要的协议和一些基本概念。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>是体系中的最高层，也是用户最能直观感受到的一层。</p>
<p>该层的任务是<strong>通过应用进程间的交互来完成特定网络应用</strong>。这里进程就是指那些正在运行的程序。</p>
<p>例如 QQ、Chrome、Foxmail 等。不同的程序有各自的协议，比如 Chrome 就应该遵守 <a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEhtt" target="_blank" rel="external">HTTP</a> 或者是 <a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">HTTPS</a> 协议，Foxmail 要遵守 <a href="https://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">SMTP</a> 协议，QQ 之间传递文件就要遵守 <a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">FTP</a> 协议。</p>
<p>我们常说的报文，就是该层交互的数据单元。</p>
<p>HTTP 协议:</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;五层模型&quot;&gt;&lt;a href=&quot;#五层模型&quot; class=&quot;headerlink&quot; title=&quot;五层模型&quot;&gt;&lt;/a&gt;五层模型&lt;/h3&gt;&lt;p&gt;相比 OSI 的 7 层参考模型，为了更加高效的开发，TCP/IP 使用了 4 层参考模型。&lt;/p&gt;
&lt;p&gt;但是一般为了介绍方便，一般采用 5 层协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://on9hzfn6s.bkt.clouddn.com/1-150526093225401.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为何协议，协议就是大家都遵守的规则，所有的这些协议统称为&lt;strong&gt;互联网协议&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="协议" scheme="http://yoursite.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="传输" scheme="http://yoursite.com/tags/%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Java 虚拟机(结构篇)</title>
    <link href="http://yoursite.com/2017/04/10/JVM%20%E7%BB%93%E6%9E%84%E7%AF%87/"/>
    <id>http://yoursite.com/2017/04/10/JVM 结构篇/</id>
    <published>2017-04-10T06:37:50.000Z</published>
    <updated>2017-04-13T12:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class-类文件的结构"><a href="#Class-类文件的结构" class="headerlink" title="Class 类文件的结构"></a>Class 类文件的结构</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>是一组以 8 位字节为基础单位的二进制流。</p>
<p>其格式是一种类似于 C 语言结构体的伪结构，由两种数据类型组成。</p>
<ol>
<li>无符号数: 基本数据类型，数字、索引引用、数量值等等。</li>
<li>表: 由多个无符号数或者其他表组成，以 _info 结尾。</li>
</ol>
<p>整个 Class 文件本质上就是一张表。</p>
<p>Class 结构的了解对进一步理解虚拟机执行引擎很重要。<br><a id="more"></a></p>
<h3 id="魔数与-Class-文件版本"><a href="#魔数与-Class-文件版本" class="headerlink" title="魔数与 Class 文件版本"></a>魔数与 Class 文件版本</h3><p>每个 Class 文件的头 4 个字节被称为魔数( Magic Number )。</p>
<p>作用是确定这个文件是否能被虚拟机接受，例如 Gif，jpeg 之类的文件也存在魔数。因为通过后缀来判断不够安全。</p>
<p>Class 文件的魔数值为: OxCAFEBABE (其魔数值某种程度上也是决定了 Java 未来的图标是咖啡 ^ v ^ )</p>
<p>第 5、6、7、8 个字节分别是次版本号和主版本号。</p>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>Class 文件的资源仓库。</p>
<p>常量池入口放置一个 u2 类型的数据，用于统计池中数量。</p>
<p>( u1，u2，u4，u8 分别代表 1、2、4、8 个字节的无符号数)</p>
<p>池中主要存放两种类型的常量：</p>
<ol>
<li>字面量: 像 Java 中的 String，final 修饰的常量。</li>
<li>符号引用: 类、接口、字段、方法、名称描述。JVM</li>
</ol>
<p>JDK 1.7 中有 14 中常量类型，每一项都是一个表。</p>
<h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><p>是否为 <code>public</code> ，<code>final</code> 是类还是接口，是否抽象，是不是枚举等等。</p>
<h3 id="类索引、父类索引、接口索引集合"><a href="#类索引、父类索引、接口索引集合" class="headerlink" title="类索引、父类索引、接口索引集合"></a>类索引、父类索引、接口索引集合</h3><h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>用来描述类或接口中声明的变量，不包括局部变量。</p>
<p>字段作用域、是实例变量还是类变量、是否被 <code>final</code> 修饰等等。</p>
<h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><p>描述方法，类似于字段的形式。</p>
<h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><p>在字段表集合和属性表集合中都存在，用来描述某些场景的专有信息。</p>
<h2 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>JVM 的指令由一个字节长度的特定数字( Opcode )和数字后面带的参数（ Operands )构成。</p>
<h3 id="字节码与数据类型"><a href="#字节码与数据类型" class="headerlink" title="字节码与数据类型"></a>字节码与数据类型</h3><p>在 Class 文件中对于不同的数据类型，采用不同的 Opcode 。</p>
<p>例如:</p>
<ul>
<li><code>iload</code> 用来操作 int 类型</li>
<li><code>fload</code> 用来操作 float 类型</li>
</ul>
<p>但是由于 JVM 中 Opcode 的长度是有限制的，只有 1 个字节，所以为每个数据类型都设计相应的 Opcode 是不现实的。</p>
<p>于是使用一些单独的指令，将不支持类型操作的，转换成支持的。</p>
<h3 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h3><p>栈帧中的局部变量表和操作数栈之间数据的相互传输。</p>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><p>也是针对不同的类型，有着不同的 Opcode，例如:</p>
<ul>
<li>加法: <code>iadd</code>、<code>ladd</code>、<code>fadd</code>、<code>dadd</code></li>
<li>减法: <code>isub</code>、<code>lsub</code>、<code>fsub</code>、<code>dsub</code></li>
<li>按位与指令: <code>ior</code>、<code>lor</code></li>
</ul>
<p>可以看出首字母就是数据类型。</p>
<h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><p>例如: <code>i2b</code> <code>i2c</code> <code>i2s</code> 等等</p>
<h3 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h3><p>实例和数组采用不同的字节码指令。</p>
<h3 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h3><p>例如:</p>
<ul>
<li>将操作数栈的栈顶一个或两个元素出栈: <code>pop</code>、<code>pop2</code>。</li>
<li>将栈最顶端的两个数值互换: <code>swap</code>。</li>
</ul>
<h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><p>可以让指令不按顺序执行程序，本质上来说就是修改 PC Register 的值。</p>
<p>Java 中的保留字 <code>goto</code> 就是无条件分支中的控制转移指令。</p>
<h3 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h3><p>例如:</p>
<ul>
<li><code>invokestatic</code> 用于调用类方法</li>
<li><code>invokeinterface</code> 用于调用接口方法</li>
</ul>
<h3 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h3><p>JVM 中，处理 <code>catch</code> 语句不是由字节码指令来实现，是采用异常表来实现的。</p>
<h3 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h3><p>方法级的同步和方法内部的同步都是使用 Monitor 来支持的。</p>
<p>方法中调用过的每条 <code>monitorenter</code> 指令都必须执行对应的 <code>monitorexit</code> 指令。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Class-类文件的结构&quot;&gt;&lt;a href=&quot;#Class-类文件的结构&quot; class=&quot;headerlink&quot; title=&quot;Class 类文件的结构&quot;&gt;&lt;/a&gt;Class 类文件的结构&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;是一组以 8 位字节为基础单位的二进制流。&lt;/p&gt;
&lt;p&gt;其格式是一种类似于 C 语言结构体的伪结构，由两种数据类型组成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无符号数: 基本数据类型，数字、索引引用、数量值等等。&lt;/li&gt;
&lt;li&gt;表: 由多个无符号数或者其他表组成，以 _info 结尾。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个 Class 文件本质上就是一张表。&lt;/p&gt;
&lt;p&gt;Class 结构的了解对进一步理解虚拟机执行引擎很重要。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java 虚拟机" scheme="http://yoursite.com/tags/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Class 结构" scheme="http://yoursite.com/tags/Class-%E7%BB%93%E6%9E%84/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Effectice Java(一)</title>
    <link href="http://yoursite.com/2017/04/04/Effective%20Java/"/>
    <id>http://yoursite.com/2017/04/04/Effective Java/</id>
    <published>2017-04-04T06:45:17.000Z</published>
    <updated>2017-04-13T12:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h2><h3 id="考虑用静态工厂方法代替构造器"><a href="#考虑用静态工厂方法代替构造器" class="headerlink" title="考虑用静态工厂方法代替构造器"></a>考虑用静态工厂方法代替构造器</h3><p>主要有 4 点优势:</p>
<ol>
<li>它们有名字</li>
<li>不需要再每次调用的时候都创建一个新的对象</li>
<li><p>可以返回原返回类型的任何子类型的对象</p>
<p>有点绕，但是不难理解。</p>
<p>例如，Java Collections Framework 的集合接口有 32 个实现，几乎所有的实现都是通过静态工厂方法在一个不可实例化的类中导出的。</p>
</li>
<li><p>在创建参数化类型实例的时候，代码更简洁。</p>
<p>举个栗子:</p>
<p>传统写法</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,List&lt;String&gt;&gt; map = <span class="keyword">new</span> Hash&lt;String,List&lt;String&gt;&gt;();</div></pre></td></tr></table></figure>
<p>每次都要写两次泛型，一点都不优雅。</p>
<p>如果 HaspMap 提供了这样的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">HashMap&lt;K,V&gt; <span class="title">newInstance</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Hash&lt;K,V&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p> 那么创建就简洁了:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,List&lt;String&gt;&gt; map = HashMap.newInstance();</div></pre></td></tr></table></figure>
<p>有 2 个缺点</p>
<ol>
<li>类如果不含公有的或者受保护的构造器，就不能被子类化</li>
<li><p>它们与其他的静态方法实际上没有什么区别</p>
<p>因为在 API 文档中，静态工厂并没有明确的标记出来，所以你不能清楚的知道该类是否用了静态工厂或者是知道该类使用了静态工厂，却又不知道该如何去实例化。</p>
</li>
</ol>
<h3 id="多个参数参与构造，考虑用构造器"><a href="#多个参数参与构造，考虑用构造器" class="headerlink" title="多个参数参与构造，考虑用构造器"></a>多个参数参与构造，考虑用构造器</h3><p>对于需要多参数来初始化的对象，一般有三种方式。</p>
<p>绝大多数程序员都使用重叠构造器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a; <span class="comment">//required</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b; <span class="comment">//required</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c; <span class="comment">//optional</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> d; <span class="comment">//optional</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> e; <span class="comment">//optional</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>(a,b,<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>(a,b,c,<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>(a,b,c,d,<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d,<span class="keyword">int</span> e)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">		<span class="keyword">this</span>.c = c;</div><div class="line">		<span class="keyword">this</span>.d = d;</div><div class="line">		<span class="keyword">this</span>.e = e;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当参数多的时候，创建实例化很乱，参数不直观,顺序颠倒之类的很难发现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> Example(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>第二种模式， JavaBeans 模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> a = -<span class="number">1</span>; <span class="comment">// Required</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> b = -<span class="number">1</span>; <span class="comment">// Required</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Example&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例化的时候</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> Example();</div><div class="line"></div><div class="line">example.setA(<span class="number">1</span>);</div><div class="line">example.setB(<span class="number">2</span>);</div><div class="line">example.setC(<span class="number">3</span>);</div><div class="line">example.setD(<span class="number">4</span>);</div><div class="line">example.setE(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>但是由于构造过程被分到了几个调用中，可能会导致不一致性，会有一定的安全问题。</p>
<p>第三种方式，即安全又具有良好的可读性:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> d;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> e;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.a = a;</div><div class="line">			<span class="keyword">this</span>.b = b;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">c</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.c = c;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">d</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.d = d;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">e</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.e = e;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Example <span class="title">builder</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Example(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Example</span><span class="params">(Builder builder)</span></span>&#123;</div><div class="line">		a = builder.a;</div><div class="line">		b = builder.b;</div><div class="line">		c = builder.c;</div><div class="line">		d = builder.d;</div><div class="line">		e = builder.e;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例化:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> Example.Builder(<span class="number">1</span>,<span class="number">2</span>).c(<span class="number">3</span>).d(<span class="number">4</span>).e(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>当然，Builder 模式也有不足的地方，为了创建对象要多创建一个构建器，但是如果你的对象初始化需要多个参数或者以后可能需要多个参数，建议还是使用构建器。</p>
<h3 id="用私有构造器或者枚举强化-Singleton-属性"><a href="#用私有构造器或者枚举强化-Singleton-属性" class="headerlink" title="用私有构造器或者枚举强化 Singleton 属性"></a>用私有构造器或者枚举强化 Singleton 属性</h3><p>一般都这通过两种方式创建单例对象:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Singleton&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于构造器是私有的，并且 INSTANCE 是被 final 修饰的，所以 <code>Singleton.INSTANCE</code> 对象是全局唯一的。</p>
<p>第二种方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Singleton&#123;...&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton getInstance&#123;</div><div class="line">		<span class="keyword">return</span> INSTANE;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工厂方法的优势在于，它更加灵活，在不改变其他 API 的前提下 ，改变其中的内容。</p>
<p>从 JDK 1.5 开始，还有第三种方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</div><div class="line">	INSTANE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>枚举的方式，更加简洁，同时无偿提供了序列化机制。 是实现 Singleton 的最佳方式。</p>
<p>但是在 Android 中，由于枚举的开销比较大，占用内存是普通单例的 10 多倍，不建议使用枚举。</p>
<h3 id="通过私有构造器强化不可实例化的能力"><a href="#通过私有构造器强化不可实例化的能力" class="headerlink" title="通过私有构造器强化不可实例化的能力"></a>通过私有构造器强化不可实例化的能力</h3><p>例如一些工具类，不希望被实例化，那就需要:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();<span class="comment">//为了避免在内部调用</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>防止被滥用，因为对于一些工具类，被实例化是没有意义的。</p>
<h3 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h3><p>举一个极端的例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<p>好吧，有点常识的都知道，这种做法特别的蠢。</p>
<p>因为相同的 String 是会被重用的，所以:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"abc"</span>;</div></pre></td></tr></table></figure>
<p>对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法来避免对象的重复创建。</p>
<p>···</p>
<h3 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h3><h3 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建和销毁对象&quot;&gt;&lt;a href=&quot;#创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;创建和销毁对象&quot;&gt;&lt;/a&gt;创建和销毁对象&lt;/h2&gt;&lt;h3 id=&quot;考虑用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#考虑用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;考虑用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;考虑用静态工厂方法代替构造器&lt;/h3&gt;&lt;p&gt;主要有 4 点优势:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它们有名字&lt;/li&gt;
&lt;li&gt;不需要再每次调用的时候都创建一个新的对象&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以返回原返回类型的任何子类型的对象&lt;/p&gt;
&lt;p&gt;有点绕，但是不难理解。&lt;/p&gt;
&lt;p&gt;例如，Java Collections Framework 的集合接口有 32 个实现，几乎所有的实现都是通过静态工厂方法在一个不可实例化的类中导出的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在创建参数化类型实例的时候，代码更简洁。&lt;/p&gt;
&lt;p&gt;举个栗子:&lt;/p&gt;
&lt;p&gt;传统写法&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高效" scheme="http://yoursite.com/tags/%E9%AB%98%E6%95%88/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Effectice" scheme="http://yoursite.com/tags/Effectice/"/>
    
      <category term="思想" scheme="http://yoursite.com/tags/%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Java 虚拟机(内存篇)</title>
    <link href="http://yoursite.com/2017/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%20%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%E7%AF%87/"/>
    <id>http://yoursite.com/2017/04/03/读书笔记之 深入理解 Java 虚拟机——内存篇/</id>
    <published>2017-04-03T09:39:37.000Z</published>
    <updated>2017-04-13T12:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-内存区域"><a href="#Java-内存区域" class="headerlink" title="Java 内存区域"></a>Java 内存区域</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于 C 和 C++ 程序员来说，他们即拥有每一个对象的“所有权”，同时也担负每一个对象生命周期的维护责任。</p>
<p>而 Java 程序员则是在虚拟机自动内存管理机制的帮助下，不用操心对象内存的释放。但是也正由于这个帮助，一旦程序出现内存泄漏和溢出问题的时候，由于不够了解虚拟机运行机制，而对问题无从下手。<br><a id="more"></a></p>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p><img src="http://on9hzfn6s.bkt.clouddn.com/Runtime.jpg" alt=""></p>
<p>上图是 Java 虚拟机运行时数据区的结构图</p>
<h4 id="PC-Register"><a href="#PC-Register" class="headerlink" title="PC Register"></a>PC Register</h4><p>当一个 Java 线程启动的时候，就会产生一个程序计数器( Program Counter Register ),它是一块较小的内存空间。</p>
<p>当线程正在执行的是一个 Java方法的时候，它记录的是正在执行的虚拟机字节码指令的地址，如果执行的是 Native 方法，就为空。</p>
<p>该区域是唯一个在 Java 虚拟机中不存在 OOM 的区域。</p>
<h4 id="JVM-Stack"><a href="#JVM-Stack" class="headerlink" title="JVM Stack"></a>JVM Stack</h4><p>与 PC Register 一样，JVM Stack 也是线程私有的。</p>
<p>其描述的是 Java 方法的内存模型。</p>
<p>在方法执行的同时会创建一个栈帧( Stack Frame ) ,用于存储局部变量表，操作数栈等信息。（之后会详说）</p>
<h4 id="Native-Stack"><a href="#Native-Stack" class="headerlink" title="Native Stack"></a>Native Stack</h4><p>与 JVM Stack 非常相似，只不过一个是关于 Java 方法的，一个是关于 Native 方法的。</p>
<h4 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h4><p>对许多应用来说， Java Heap 是 JVM 所管理的内存中最大的一块。其资源也是被所有线程所共享的。</p>
<p>该区域的唯一目的就是存放内存对象实例。它也是垃圾收集器主要管理的区域。(也有称其为“ GC 堆”)</p>
<h4 id="Method-Area"><a href="#Method-Area" class="headerlink" title="Method Area"></a>Method Area</h4><p>也是被线程共享的区域，主要用来存储已被虚拟机加载过的类的信息，常量，静态变量等。</p>
<p>JVM 规范中称它为 Heap 的一个逻辑部分。但它还有一个别名叫做 Non-Heap。</p>
<p>也有部分 HotSpot 虚拟机开发者称其为 Permanent Generation（永久代），因为 HotSpot 虚拟机的设计团队将 GC 分代收集机制应用于方法区，将它看做是永久代处理。</p>
<h4 id="Runtime-Constant-Pool"><a href="#Runtime-Constant-Pool" class="headerlink" title="Runtime Constant Pool"></a>Runtime Constant Pool</h4><p>运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号用引用。</p>
<h4 id="Direct-Memory"><a href="#Direct-Memory" class="headerlink" title="Direct Memory"></a>Direct Memory</h4><p>直接内存虽然不是 JVM 运行时数据区的一部分，但是却被频繁使用。</p>
<p>在 JDK 1.4 中新加入了 NIO（New Input/Output）类，引入了一种基于 Channel 与 Buffer 的 I/O 方式，它可以使用 Native 直接分配堆外内存，然后用 Java Heap 中的 DirectByteBuffer 对象作为内存引用进行操作。避免在 Java Heap 和 Native Heap 来回复制数据，提高了不少性能。</p>
<h3 id="HotSpot-虚拟机对象"><a href="#HotSpot-虚拟机对象" class="headerlink" title="HotSpot 虚拟机对象"></a><a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="external">HotSpot</a> 虚拟机对象</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>当遇到一条 New 指令的时候，检查该类是否已经被加载解析，初始化。如果没有先执行类的加载过程，关于类的加载之后再详说。</p>
<p>加载检查之后就是分配内存空间。</p>
<p>关于内存的分配根据收集器算法的不同而采用不同的分配方式：</p>
<ul>
<li>例如 Serial 和 ParNew 等带 Compact 过程的的收集器使用的分配算法是指针碰撞。（因为采用压缩算法，内存相对是平整的）</li>
<li>使用 CMS 这种基于 Mark-Sweep 算法的收集器采用的是空间列表。（因为标记清除容易产生内存碎片化，需要用列表来记录可用内存指针的位置）</li>
</ul>
<p>考虑到并发情况下操作内存指针的安全性问题，对分配内存又进行了同步处理：</p>
<ul>
<li>采用 <a href="http://www.searchsoa.com.cn/showcontent_69238.htm" target="_blank" rel="external">CAS</a> 配上失败重试的方式保证更新操作的原子性。</li>
<li>一开始就给不同线程分配一块叫做<em>本地线程分配缓冲</em>（Thread Local Allocatiuon Buffer,TLAB）的区域当做缓存，只有当它用完了，重新分配的时候才需要同步锁定。</li>
</ul>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>对象布局主要由三个部分组成：</p>
<h5 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h5><p>对象头主要由两个部分组成：</p>
<ol>
<li><p>第一部分 官方称之为 Mack Word ，主要存储哈希码，GC 分代年龄，锁状态的标志等信息。<br><img src="http://on9hzfn6s.bkt.clouddn.com/ObejctHeader.jpg" alt=""></p>
</li>
<li><p>第二分就是存储类型指针了。也就是指向对象的类元数据指针。</p>
</li>
</ol>
<h5 id="Insatance-Data"><a href="#Insatance-Data" class="headerlink" title="Insatance Data"></a>Insatance Data</h5><p>该部分存储的是对象真正的有效信息，存储的是代码中定义的各种类型的字段。不论是父类继承，还是子类定义的信息都会被记录。</p>
<h5 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h5><p>由于虚拟机的管理机制要求，对象的起始地址必须是 8 个字节的整数倍，所以该部分就是用来填补空缺的。</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>关于对象的访问，许多人都知道，是通过在 Stack 上的一个 reference 数据来操作 Heap 上的具体对象，但是是通过什么方式访问却没有指定。</p>
<p>目前主流的有两种方式，<strong>句柄</strong> 和 <strong>直接指针</strong>。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%A5%E6%9F%84" target="_blank" rel="external"><em>句柄</em></a><br><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%885.01.54.png" alt=""></li>
</ul>
<p>上图已经表示的非常清楚了，使用该方式的访问，Java Heap 中会划分出一个句柄池，优点很明显，当对象改变时，Java Stack 中的 reference 是不改变的。移动的是句柄中的实例数据指针。</p>
<ul>
<li><em>直接指针</em><br><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%885.02.07.png" alt=""></li>
</ul>
<p>很明显 reference 直接指向对象实例数据，优势就是速度更快。（ HotSpot 使用这种方式）</p>
<h2 id="Java-垃圾收集器"><a href="#Java-垃圾收集器" class="headerlink" title="Java 垃圾收集器"></a>Java 垃圾收集器</h2><h3 id="关于对象存活的判断"><a href="#关于对象存活的判断" class="headerlink" title="关于对象存活的判断"></a>关于对象存活的判断</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>给对象添加一个引用计数器，被引用加 1 ，引用失效减 1 。为 0 就说明不再被使用。</p>
<p>该算法的优势很明显：实现简单，判定效率也很高。</p>
<p>但是缺点也明显：很难解决对象之间相互循环引用的问题。这也是 JVM 没有选用该算法的最主要原因。</p>
<h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>通过一系列被称为 GC Root 的对象作为起点，从这些节点向下搜索，没有被搜索到的对象都被当做垃圾。</p>
<p>可以被当成是 GC Root 对象的，在 Java 中有：</p>
<ul>
<li>JVM Stack 中引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中 Native 方法引用的对象。</li>
</ul>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%885.31.55.png" alt=""></p>
<p>先标记无用对象，在清除。是最基础算法，之后的算法都是根据它来改进。</p>
<p>不足有两点：</p>
<ol>
<li>标记和清除的效率都不高。</li>
<li>清除之后会导致内存的碎片化。</li>
</ol>
<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%885.32.09.png" alt=""></p>
<p>将内存一分为二，每次用其中一块。当一块内存用完的时候，就将存活的对象复制到另一块新的空的内存中，然后这边一次性全部清空就好了。简单高效。</p>
<p>缺点很明显，就是只有一半的内存能用。</p>
<h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%885.32.25.png" alt=""></p>
<p>可以说是前两种算法的综合，标记阶段和“<em>标记-清除</em>”算法一样，清除阶段先是将存活对象移到一边，然后直接清除没被引用对象。</p>
<p>解决了碎片化和清除效率低的问题。</p>
<h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前主流算法，是前面几种算法的综合。</p>
<p>根据对象存活的周期(每 GC 一次算一个周期)，将内存分为新生代和老年代。</p>
<p>在新生代由于对象一般都是朝生夕死，而且占用内存量相对小，所以使用复制算法。</p>
<p>老年代存活率高，使用”<em>标记-清理</em>”或者“<em>标记-整理</em>”算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-内存区域&quot;&gt;&lt;a href=&quot;#Java-内存区域&quot; class=&quot;headerlink&quot; title=&quot;Java 内存区域&quot;&gt;&lt;/a&gt;Java 内存区域&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;对于 C 和 C++ 程序员来说，他们即拥有每一个对象的“所有权”，同时也担负每一个对象生命周期的维护责任。&lt;/p&gt;
&lt;p&gt;而 Java 程序员则是在虚拟机自动内存管理机制的帮助下，不用操心对象内存的释放。但是也正由于这个帮助，一旦程序出现内存泄漏和溢出问题的时候，由于不够了解虚拟机运行机制，而对问题无从下手。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="内存" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="GC" scheme="http://yoursite.com/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>Atlas框架浅析</title>
    <link href="http://yoursite.com/2017/03/27/Atlas%E6%A1%86%E6%9E%B6%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2017/03/27/Atlas框架浅析/</id>
    <published>2017-03-27T02:29:04.000Z</published>
    <updated>2017-04-13T12:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Atlas框架浅析"><a href="#Atlas框架浅析" class="headerlink" title="Atlas框架浅析"></a><a href="http://atlas.taobao.org/docs/principle-intro/Runtime_principle.html" target="_blank" rel="external">Atlas框架浅析</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Atlas由来"><a href="#Atlas由来" class="headerlink" title="Atlas由来"></a>Atlas由来</h3><p>Atlas 是希腊神话中擎天的巨人。  (寓为脚踏底层框架，为应用撑起一片天)</p>
<p>2013年手淘人员倍增，整个客户端架构重构，形成了今天的 <a href="https://github.com/alibaba/atlas" target="_blank" rel="external">Atlas</a>。<br><a id="more"></a></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>工程期，实现工程独立开发，调试的功能，工程模块独立。</li>
<li>运行期，实现完整的组件生命周期的映射，类隔离等机制。</li>
<li>运维期，提供快速增量的更新修复能力，快速升级。</li>
</ul>
<h3 id="关于组件化"><a href="#关于组件化" class="headerlink" title="关于组件化"></a>关于组件化</h3><p><img src="http://img.ithome.com/newsuploadfiles/2014/4/20140416_142230_251.jpg" alt=""></p>
<p>上图是 Google 的 <a href="http://baike.baidu.com/link?url=xjB1VemJ78Qs4fRHSVEcbEDRcb8JuHJFEMIIDY7J9JTbN1CZIIYcxlr2S1H9PzUQcCxLL7TD3zfNUmPKUzrd0f0Tn4T20RMzHji3_RpCYNqWCgiJcsuhc3U8ZeDWE98dweMMnSmWbxiwXuyjJ1hSg_" target="_blank" rel="external">模块化手机</a>，与该框架在许多地方有异曲同工之妙。</p>
<p>Atlas 框架支持大量丰富的业务接入，同时业务之间又能够保持相对的独立性，耦合性低，各自可以灵活的升级维护。</p>
<p>一些底层业务，例如缓冲框架，图片加载框架，网络加载框架等中间件代码又能够全面复用。</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161017172555.png" alt=""></p>
<p>上图中，上层是许多独立业务，组件 Bundle 之间又可以通过路由调用其他业务。下层是底层共享框架，由容器统一管理。</p>
<h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><h3 id="容器框架"><a href="#容器框架" class="headerlink" title="容器框架"></a>容器框架</h3><p>该框架自下而上主要分为5层</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/360%E6%A1%8C%E9%9D%A2%E6%88%AA%E5%9B%BE20161018150127.png" alt=""></p>
<ol>
<li><strong>Hack 层</strong>：一些系统的注入以及工具类的初始化校验等，并在容器启动时进行全局性的兼容校验。</li>
<li><strong>Bundle Framework 层</strong>：负责组件的安装、更新、操作以及管理 <a href="http://atlas.taobao.org/docs/principle-intro/Project_architectured.html" target="_blank" rel="external">Bundle</a> 的生命周期。</li>
<li><strong>Runtime 层</strong>：主要是版本、清单和代理管理。</li>
<li><strong>Business 层</strong>：向业务方暴露一些接口。</li>
<li><strong>应用接入层</strong>：完成 Atlas 的初始化功能，业务代码。</li>
</ol>
<h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><h4 id="Bundle-生命周期"><a href="#Bundle-生命周期" class="headerlink" title="Bundle 生命周期"></a>Bundle 生命周期</h4><p><img src="http://atlas.taobao.org/docs/principle-intro/Project_architectured_img/bundle_cycle.png" alt=""></p>
<ol>
<li><strong>startInstall</strong> 开始加载</li>
<li><strong>Installed</strong> 加载完毕 注入资源路径，开始创建 <code>class loader</code></li>
<li><strong>resolved</strong>    解析完毕 校验组件的安全性</li>
<li><strong>active</strong>      运行组件 Bundle</li>
<li><strong>started</strong> 运行成功</li>
</ol>
<h4 id="Runtime层详解"><a href="#Runtime层详解" class="headerlink" title="Runtime层详解"></a>Runtime层详解</h4><h5 id="清单"><a href="#清单" class="headerlink" title="清单"></a><em>清单</em></h5><p><a href="http://baike.baidu.com/link?url=63266s6ygSe4vCxpc8dR5LCkYcK8nLJRpXo6cOkWhW7LTUrdptPNKic2m2b6egtiLIgmcQC1JBrF1k113CpFfq" target="_blank" rel="external">OSGI</a> 规范中每个组件通常通过 OSGI.MF 来暴露自身的 component ,这是与 Atlas 容器所不同的地方。在 Android 设备上，多文件的形式很容易受IO异常的影响干扰 bundle 正常运行，所以我们采用了构建期间集中生成清单的方式，清单里面记录 bundle 所有的 component (Android 四大组件)，依赖、packagename 等内容。</p>
<h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a><em>版本</em></h5><p>每个组件在构建期间就由构建插件分配自己的版本号，同时安装期间也有各自的版本目录，每个 bundle 的启动加载都需要经过版本的校验，组件发生更新同时也下发最新的版本信息。依托版本管理机制组件的热更新能力水到渠成。</p>
<h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a><em>代理</em></h5><p>最核心的两个代理点：一个是 <code>DelegateClassLoader</code>：负责路由 <code>class</code> 加载到各个 bundle 内部，第二个是 <code>DelegateResource</code>：负责资源查找时能够找到 bundle 内的资源；这是 bundle 能够真正运行起来的根本；其余的代理点均是为了保证在必要的时机按需加载起来目标 bundle，让其可以被 <code>DelegateClassloader</code> 和 DelegateResource 使用。</p>
<h4 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h4><p>正因为 <code>classloader</code> 的存在，组件的独立性有了充分的保证。利用 <code>Delegate ClassLoader</code> 来动态加载组件的类。<code>Delegate ClassLoader</code> 先查找宿主 Bundle 的 <code>PathClassLoader</code>，然后根据前面的 BundleList 找到对应的 <code>BundleClassLoader</code>.</p>
<p><img src="http://atlas.taobao.org/docs/principle-intro/Project_architectured_img/classloader.png" alt=""></p>
<h4 id="资源加载机制"><a href="#资源加载机制" class="headerlink" title="资源加载机制"></a>资源加载机制</h4><p>所有的 Bundle 资源会按顺序被添加到 AssertPath 中，DelegateResource 会替换系统的 resource。</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161017154906.png" alt=""></p>
<h2 id="动态部署"><a href="#动态部署" class="headerlink" title="动态部署"></a>动态部署</h2><h3 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h3><p>之前的组件化只是解决了耦合性的问题，动态部署实现了随时发包的功能。</p>
<ol>
<li><strong>构建</strong> 一般的 Apk 更新产物是 apk，动态部署的构建产物是一个后缀为 tpatch 格式的文件。</li>
<li><strong>Merge</strong> 下载到 tpatch 文件之后，在后台完成 Merge 到安装的过程，整个过程对用户是透明的。</li>
<li><strong>生效</strong> Merge 完成后，会在 App 下次重新打开的时候完成此次的部署。</li>
</ol>
<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>主 Apk 和 bundle 的差量采用的是不同的策略，主Apk始终是与基线版本做差量，而 bundle 是与上一个版本做差量。</p>
<p>例如 1.0 动态部署到 1.1 再到 1.2，主 Apk 在 1.1 升 1.2 的时候是将 1.2 与 1.0 (也就是基线)做差量而不是1.1。而 bundle 则是逐个版本做差量分析。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>基于手淘自主研发的差量算法，主 Bundle (也就是主 Apk )基于 <code>ClassLoader</code> 机制，业务 Bundle 基于差量 merge。</p>
<p><img src="http://atlas.taobao.org/docs/update/img/art_maindex_merge.png" alt=""></p>
<p><strong>主 Bundle</strong> 的 Merge 在 <a href="http://baike.baidu.com/link?url=_xpjWNOxKozSLkceX5OZ5DU4o4fHwieu2seCMWLlMWBtxrYNcOobwSSkLtM9lKs9IbgssJdozCy7xTV7GJ_gra" target="_blank" rel="external">Dalvik</a> 和 [Art] (<a href="http://baike.baidu.com/item/Android%20runtime?sefr=cr" target="_blank" rel="external">http://baike.baidu.com/item/Android%20runtime?sefr=cr</a>) ( Android Runtime )中是不同的。</p>
<p> Dalvik 设备上没有任何 Merge 过程，直接把 libcom_taobao_maindex.so 以 bundle 的形式安装到 com.taobao.maindex 目录下。</p>
<p>Art 设备上我们会根据 source 的 apk（主 apk 的 merge 永远是基于基线版本）把 classes.dex 提取出来以多 dex 的方式追加到 libcom_taobao_maindex.so 中，如果本身是多 dex 机制的，那么会将多个子 dex 全部追加进去，patch 里面的 classes.dex 保持不变，source 里面的 dex 的序列号往后偏移一位。关于 preVerify 标签问题，<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a" target="_blank" rel="external">QQ 空间的热修复方案</a>是在类中的构造函数里插入代码。</p>
<p><strong>业务 Bundle</strong> 的 Merge 相对简单一些。</p>
<p><img src="http://atlas.taobao.org/docs/update/img/bundle_merge.png" alt=""></p>
<p>patch 信息来自于 bundle 在下载的 tpatch 包中的内容，客户端的 merge 过程会根据 patch 信息，取到 source 组件，source dex 和 patch dex 进行 dex 合并，合成新的 dex，同时变化的资源覆盖老的资源最终形成新的组件。</p>
<h2 id="AtlasDemo"><a href="#AtlasDemo" class="headerlink" title="AtlasDemo"></a><a href="https://github.com/alibaba/atlas/tree/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo" target="_blank" rel="external">AtlasDemo</a></h2><h3 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h3><p>安装运行 Demo 配置如下：</p>
<p>app 的 build.gradle 文件中</p>
<p><code>version = getEnvValue(&quot;versionName&quot;,&quot;1.0.0&quot;);</code></p>
<p>AndroidMainfest.xml 文件中</p>
<p><code>android:versionName=&quot;1.0.0&quot;</code></p>
<p>bundle 中的 build.gradle文件中</p>
<p><code>version = &#39;1.0.0&#39;</code></p>
<p>接着运行 shell 脚本 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildApk.sh" target="_blank" rel="external">buildApk.sh </a></p>
<p>构建app，生成 apk 和 ap，同时把 ap 文件发布到本地仓库</p>
<p>此时点击动态部署：</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-42-34.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>点击 Go TO BUNDLEACTIVITY</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-42-46.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>显示的是业务bundle版本号</p>
<p>–</p>
<p>修改配置以及 项目代码(可选)：</p>
<p>app 的 build.gradle 文件中</p>
<p><code>version = getEnvValue(&quot;versionName&quot;,&quot;1.0.1&quot;);</code></p>
<p>AndroidMainfest.xml 文件中</p>
<p><code>android:versionName=&quot;1.0.1&quot;</code></p>
<p>bundle 中的 build.gradle文件中</p>
<p><code>version = &#39;1.0.1&#39;</code></p>
<p>再次执行 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildApk.sh" target="_blank" rel="external">shell</a> 脚本，构建app，生成 apk 和 ap，同时把 ap 文件发布到本地仓库 again</p>
<p>–</p>
<p>最后执行 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildTpatch.sh" target="_blank" rel="external">buildTpatch.sh</a> 脚本，重构 apk，生成 patch 包，上传 tpatch</p>
<p>点击动态部署</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-13.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p> 部署成功，重启生效。</p>
<p>其中 <code>./gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1</code> 版本号需要相对应</p>
<p>–</p>
<p>重启app之后,主 Bundle 版本号已经改变，动态部署成功。</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-23.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p> 点击 Go TO BUNDLEACTIVITY 进入业务 bundle 发现版本号也是发现了变化。</p>
<p>  <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-29.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>无需重新安装app就完成了业务代码的修改，这就是动态部署的魅力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Atlas框架浅析&quot;&gt;&lt;a href=&quot;#Atlas框架浅析&quot; class=&quot;headerlink&quot; title=&quot;Atlas框架浅析&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://atlas.taobao.org/docs/principle-intro/Runtime_principle.html&quot;&gt;Atlas框架浅析&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;Atlas由来&quot;&gt;&lt;a href=&quot;#Atlas由来&quot; class=&quot;headerlink&quot; title=&quot;Atlas由来&quot;&gt;&lt;/a&gt;Atlas由来&lt;/h3&gt;&lt;p&gt;Atlas 是希腊神话中擎天的巨人。  (寓为脚踏底层框架，为应用撑起一片天)&lt;/p&gt;
&lt;p&gt;2013年手淘人员倍增，整个客户端架构重构，形成了今天的 &lt;a href=&quot;https://github.com/alibaba/atlas&quot;&gt;Atlas&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="一些新东西" scheme="http://yoursite.com/categories/%E4%B8%80%E4%BA%9B%E6%96%B0%E4%B8%9C%E8%A5%BF/"/>
    
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="阿里" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C/"/>
    
      <category term="Atlas" scheme="http://yoursite.com/tags/Atlas/"/>
    
      <category term="Andoird" scheme="http://yoursite.com/tags/Andoird/"/>
    
  </entry>
  
  <entry>
    <title>Head First 设计模式</title>
    <link href="http://yoursite.com/2017/03/23/Head%20First%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/23/Head First 设计模式/</id>
    <published>2017-03-23T09:13:20.000Z</published>
    <updated>2017-04-15T05:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=458647488&auto=1&height=32"></iframe>

<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>
<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<a id="more"></a>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>设计原则</strong>:抽取可能发生改变的，与不会发生改变的隔离。</p>
<p>将会发生改变的相关性强的行为或者功能抽象，抽取，定义为一个接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义该接口下不同的方法：</p>
<p>方法A:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">IStrategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		System.out.println(<span class="string">"ConcreteStrategyA类,FuncA()."</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法B:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">IStrategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		System.out.println(<span class="string">"ConcreteStrategyB类,FuncB()."</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法C:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span> <span class="keyword">implements</span> <span class="title">IStrategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		System.out.println(<span class="string">"ConcreteStrategyC类,FuncC()."</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用该功能的类持有该接口的引用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">	</div><div class="line">		IStrategy iStrategy = <span class="keyword">new</span> ConcreteStrategyA();</div><div class="line">		iStrategy.Func();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">	</div><div class="line">		IStrategy iStrategy = <span class="keyword">new</span> ConcreteStrategyA();</div><div class="line">		iStrategy.Func();</div><div class="line">		iStrategy = <span class="keyword">new</span> ConcreteStrategyB();</div><div class="line">		iStrategy.Func();</div><div class="line">		iStrategy = <span class="keyword">new</span> ConcreteStrategyC();</div><div class="line">		iStrategy.Func();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行：</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-03%20%E4%B8%8B%E5%8D%8810.58.58.png" alt=""></p>
<p>是的，非常简单，你会发现其实就是多态的体现。</p>
<p>当然这里举的只是最基本的例子，实际开发会在该基础上复杂化，但是基本框架是不变的。</p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>定义了对象之间的一对多依赖。当一个对象改变，它的依赖者都会收到通知并做出改变。</p>
<h3 id="UML-1"><a href="#UML-1" class="headerlink" title="UML"></a>UML</h3><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>设计原则</strong>:为了交互对象之间的松耦合设计而努力。</p>
<p>定义一个主题接口，定义<em>注册订阅者</em>，<em>移除订阅者</em>，以及<em>通知订阅者</em>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个订阅者接口，定义一个更新方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个主题类，实现主题接口中的方法。</p>
<p>维护一个订阅者列表，注册时加入列表，取消时移出列表，内容更新就遍历列表逐个通知。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;Observer&gt; observers;</div><div class="line">	<span class="keyword">private</span> String updateStr;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteSubject</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>&#123;</div><div class="line">	</div><div class="line">		observers.add(o);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">if</span>(observers.indexOf(o)&gt;=<span class="number">0</span>)&#123;</div><div class="line">			observers.remove(observers.indexOf(o));</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;observers.size(); i++) &#123;</div><div class="line">			Observer observer = (Observer)observers.get(i);</div><div class="line">			observer.update(updateStr);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateStr</span><span class="params">(String updateStr)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">this</span>.updateStr = updateStr;</div><div class="line">		updateStrChanged();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStrChanged</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">		notifyObservers();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个观察者类，实现观察者接口中的所有方法，通过主题实现类的引用订阅主题:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String updateStr;</div><div class="line">	<span class="keyword">private</span> Subject mConcreteSubject;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(Subject concreteSubject)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">this</span>.mConcreteSubject = concreteSubject;</div><div class="line">		mConcreteSubject.registerObserver(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span></span>&#123;</div><div class="line">	</div><div class="line">		System.out.println(str);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>创建主题和订阅者对象，修改主题内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	</div><div class="line">		ConcreteSubject concreteSubject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line">		Observer concreteObserver = <span class="keyword">new</span> ConcreteObserver(concreteSubject);</div><div class="line">		concreteSubject.setUpdateStr(<span class="string">"主题改变A"</span>);</div><div class="line">		concreteSubject.setUpdateStr(<span class="string">"主题改变B"</span>);</div><div class="line">		concreteSubject.setUpdateStr(<span class="string">"主题改变C"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行:</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-04%20%E4%B8%8A%E5%8D%8810.50.03.png" alt=""></p>
<p>其实 Java 中就有内置观察者模式，不过与上面结构有一点区别。</p>
<p>其中 Observer 还是接口形式，Subject 接口变成了 Observable 抽象类。许多功能都已经实现好了，直接使用 Observable 的 <code>addObserver()</code> 和 <code>deleteObserver()</code> 就可以添加以及取消订阅了。</p>
<p>并且在 <code>update()</code> 方法中，需要传入两个参数，一个主题，一个订阅者，用于更新来自不同主题的内容，更加灵活。</p>
<p>不过总体的结构和思想是一样的。</p>
<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>动态地将责任附加到对象上，装饰者提供了比继承更有弹性的扩展功能。</p>
<h3 id="UML-2"><a href="#UML-2" class="headerlink" title="UML"></a>UML</h3><p><img src="http://on9hzfn6s.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><strong>设计原则</strong>:类应该对扩展开放，对修改关闭。</p>
<p>定义一个基类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span></span>&#123;</div><div class="line"></div><div class="line">	String description = <span class="string">"Component"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> description;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>; </div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了方便测试，其中一个方法将显示该类名。</p>
<p>接着定义一个或者多个组件，继承基类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">	String description = <span class="string">"ConcreteComponent"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteComponent</span><span class="params">()</span></span>&#123;</div><div class="line">		description = <span class="string">"ConcreteComponent"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个装饰者抽象类,这样之前定义的组件和它就是同一类型了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">methodA</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>;</div><div class="line">	 </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承装饰者抽象类，根据不同需求，定义各自的装饰内容:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</div><div class="line">	Component component;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span><span class="params">(Component component)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.component = component;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> component.methodA() + <span class="string">",ConcreteDecoratorA"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</div><div class="line"></div><div class="line">	Component component;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorB</span><span class="params">(Component component)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.component = component;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> component.methodA() + <span class="string">",ConcreteDecoratorB"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>因为就一个组件，可能测试效果不是很好，但是也可以看得出来用法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass1</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	</div><div class="line">		Component component1 = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">		component1 = <span class="keyword">new</span> ConcreteDecoratorA(component1);</div><div class="line">		component1 = <span class="keyword">new</span> ConcreteDecoratorB(component1);</div><div class="line">		component1 = <span class="keyword">new</span> ConcreteDecoratorA(component1);</div><div class="line">		System.out.println(component1.methodA());</div><div class="line"></div><div class="line">		Component component2 = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">		component2 = <span class="keyword">new</span> ConcreteDecoratorB(component2);</div><div class="line">		component2 = <span class="keyword">new</span> ConcreteDecoratorA(component2);</div><div class="line">		System.out.println(component2.methodA());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行</p>
<p><img src="http://on9hzfn6s.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-04%20%E4%B8%8B%E5%8D%888.40.15.png" alt=""></p>
<p>可以看得出来，该结构非常的灵活。(对象的建立不大优雅，之后会有更好的模式可以运用)</p>
<p>画图工具使用 Chrome 应用 <a href="https://chrome.google.com/webstore/detail/gliffy-diagrams/bhmicilclplefnflapjmnngmkkkkpfad" target="_blank" rel="external">Gliffy Diagrams</a> ，好用看得见。</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;//music.163.com/outchain/player?type=2&amp;id=458647488&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。&lt;/p&gt;
&lt;h3 id=&quot;UML&quot;&gt;&lt;a href=&quot;#UML&quot; class=&quot;headerlink&quot; title=&quot;UML&quot;&gt;&lt;/a&gt;UML&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://on9hzfn6s.bkt.clouddn.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
