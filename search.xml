<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Atlas框架浅析]]></title>
      <url>http://yoursite.com/2017/03/27/Atlas%E6%A1%86%E6%9E%B6%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>#<a href="http://atlas.taobao.org/docs/principle-intro/Runtime_principle.html" target="_blank" rel="external">Atlas框架浅析</a></p>
<p>##简介</p>
<p>###Atlas由来<br>Atlas 是希腊神话中擎天的巨人。  (寓为脚踏底层框架，为应用撑起一片天)</p>
<p>2013年手淘人员倍增，整个客户端架构重构，形成了今天的 <a href="https://github.com/alibaba/atlas" target="_blank" rel="external">Atlas</a>。</p>
<p>###作用</p>
<ul>
<li>工程期，实现工程独立开发，调试的功能，工程模块独立。</li>
<li>运行期，实现完整的组件生命周期的映射，类隔离等机制。</li>
<li>运维期，提供快速增量的更新修复能力，快速升级。</li>
</ul>
<p>###关于组件化<br><img src="http://img.ithome.com/newsuploadfiles/2014/4/20140416_142230_251.jpg" alt=""></p>
<p>上图是 Google 的 <a href="http://baike.baidu.com/link?url=xjB1VemJ78Qs4fRHSVEcbEDRcb8JuHJFEMIIDY7J9JTbN1CZIIYcxlr2S1H9PzUQcCxLL7TD3zfNUmPKUzrd0f0Tn4T20RMzHji3_RpCYNqWCgiJcsuhc3U8ZeDWE98dweMMnSmWbxiwXuyjJ1hSg_" target="_blank" rel="external">模块化手机</a>，与该框架在许多地方有异曲同工之妙。</p>
<p>Atlas 框架支持大量丰富的业务接入，同时业务之间又能够保持相对的独立性，耦合性低，各自可以灵活的升级维护。</p>
<p>一些底层业务，例如缓冲框架，图片加载框架，网络加载框架等中间件代码又能够全面复用。</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161017172555.png" alt=""></p>
<p>上图中，上层是许多独立业务，组件 Bundle 之间又可以通过路由调用其他业务。下层是底层共享框架，由容器统一管理。</p>
<p>##框架原理</p>
<p>###容器框架<br>该框架自下而上主要分为5层</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/360%E6%A1%8C%E9%9D%A2%E6%88%AA%E5%9B%BE20161018150127.png" alt=""></p>
<ol>
<li><strong>Hack 层</strong>：一些系统的注入以及工具类的初始化校验等，并在容器启动时进行全局性的兼容校验。</li>
<li><strong>Bundle Framework 层</strong>：负责组件的安装、更新、操作以及管理 <a href="http://atlas.taobao.org/docs/principle-intro/Project_architectured.html" target="_blank" rel="external">Bundle</a> 的生命周期。</li>
<li><strong>Runtime 层</strong>：主要是版本、清单和代理管理。</li>
<li><strong>Business 层</strong>：向业务方暴露一些接口。</li>
<li><strong>应用接入层</strong>：完成 Atlas 的初始化功能，业务代码。</li>
</ol>
<p>###技术细节</p>
<p>####Bundle 生命周期<br><img src="http://atlas.taobao.org/docs/principle-intro/Project_architectured_img/bundle_cycle.png" alt=""></p>
<ol>
<li><strong>startInstall</strong> 开始加载</li>
<li><strong>Installed</strong> 加载完毕 注入资源路径，开始创建 <code>class loader</code></li>
<li><strong>resolved</strong>    解析完毕 校验组件的安全性</li>
<li><strong>active</strong>      运行组件 Bundle</li>
<li><strong>started</strong> 运行成功</li>
</ol>
<p>####Runtime层详解</p>
<p>#####<em>清单</em><br><a href="http://baike.baidu.com/link?url=63266s6ygSe4vCxpc8dR5LCkYcK8nLJRpXo6cOkWhW7LTUrdptPNKic2m2b6egtiLIgmcQC1JBrF1k113CpFfq" target="_blank" rel="external">OSGI</a> 规范中每个组件通常通过 OSGI.MF 来暴露自身的 component ,这是与 Atlas 容器所不同的地方。在 Android 设备上，多文件的形式很容易受IO异常的影响干扰 bundle 正常运行，所以我们采用了构建期间集中生成清单的方式，清单里面记录 bundle 所有的 component (Android 四大组件)，依赖、packagename 等内容。</p>
<p>#####<em>版本</em><br>每个组件在构建期间就由构建插件分配自己的版本号，同时安装期间也有各自的版本目录，每个 bundle 的启动加载都需要经过版本的校验，组件发生更新同时也下发最新的版本信息。依托版本管理机制组件的热更新能力水到渠成。</p>
<p>#####<em>代理</em><br>最核心的两个代理点：一个是 <code>DelegateClassLoader</code>：负责路由 <code>class</code> 加载到各个 bundle 内部，第二个是 <code>DelegateResource</code>：负责资源查找时能够找到 bundle 内的资源；这是 bundle 能够真正运行起来的根本；其余的代理点均是为了保证在必要的时机按需加载起来目标 bundle，让其可以被 <code>DelegateClassloader</code> 和 DelegateResource 使用。</p>
<p>####类加载机制<br>正因为 <code>classloader</code> 的存在，组件的独立性有了充分的保证。利用 <code>Delegate ClassLoader</code> 来动态加载组件的类。<code>Delegate ClassLoader</code> 先查找宿主 Bundle 的 <code>PathClassLoader</code>，然后根据前面的 BundleList 找到对应的 <code>BundleClassLoader</code>.</p>
<p><img src="http://atlas.taobao.org/docs/principle-intro/Project_architectured_img/classloader.png" alt=""></p>
<p>####资源加载机制<br>所有的 Bundle 资源会按顺序被添加到 AssertPath 中，DelegateResource 会替换系统的 resource。</p>
<p><img src="http://77g29m.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161017154906.png" alt=""></p>
<p>##动态部署</p>
<p>###技术分析<br>之前的组件化只是解决了耦合性的问题，动态部署实现了随时发包的功能。</p>
<ol>
<li><strong>构建</strong> 一般的 Apk 更新产物是 apk，动态部署的构建产物是一个后缀为 tpatch 格式的文件。</li>
<li><strong>Merge</strong> 下载到 tpatch 文件之后，在后台完成 Merge 到安装的过程，整个过程对用户是透明的。</li>
<li><strong>生效</strong> Merge 完成后，会在 App 下次重新打开的时候完成此次的部署。</li>
</ol>
<p>####构建<br>主 Apk 和 bundle 的差量采用的是不同的策略，主Apk始终是与基线版本做差量，而 bundle 是与上一个版本做差量。</p>
<p>例如 1.0 动态部署到 1.1 再到 1.2，主 Apk 在 1.1 升 1.2 的时候是将 1.2 与 1.0 (也就是基线)做差量而不是1.1。而 bundle 则是逐个版本做差量分析。</p>
<p>####Merge<br>基于手淘自主研发的差量算法，主 Bundle (也就是主 Apk )基于 <code>ClassLoader</code> 机制，业务 Bundle 基于差量 merge。</p>
<p><img src="http://atlas.taobao.org/docs/update/img/art_maindex_merge.png" alt=""></p>
<p><strong>主 Bundle</strong> 的 Merge 在 <a href="http://baike.baidu.com/link?url=_xpjWNOxKozSLkceX5OZ5DU4o4fHwieu2seCMWLlMWBtxrYNcOobwSSkLtM9lKs9IbgssJdozCy7xTV7GJ_gra" target="_blank" rel="external">Dalvik</a> 和 [Art] (<a href="http://baike.baidu.com/item/Android%20runtime?sefr=cr" target="_blank" rel="external">http://baike.baidu.com/item/Android%20runtime?sefr=cr</a>) ( Android Runtime )中是不同的。</p>
<p> Dalvik 设备上没有任何 Merge 过程，直接把 libcom_taobao_maindex.so 以 bundle 的形式安装到 com.taobao.maindex 目录下。</p>
<p>Art 设备上我们会根据 source 的 apk（主 apk 的 merge 永远是基于基线版本）把 classes.dex 提取出来以多 dex 的方式追加到 libcom_taobao_maindex.so 中，如果本身是多 dex 机制的，那么会将多个子 dex 全部追加进去，patch 里面的 classes.dex 保持不变，source 里面的 dex 的序列号往后偏移一位。关于 preVerify 标签问题，<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a" target="_blank" rel="external">QQ 空间的热修复方案</a>是在类中的构造函数里插入代码。</p>
<p><strong>业务 Bundle</strong> 的 Merge 相对简单一些。</p>
<p><img src="http://atlas.taobao.org/docs/update/img/bundle_merge.png" alt=""></p>
<p>patch 信息来自于 bundle 在下载的 tpatch 包中的内容，客户端的 merge 过程会根据 patch 信息，取到 source 组件，source dex 和 patch dex 进行 dex 合并，合成新的 dex，同时变化的资源覆盖老的资源最终形成新的组件。</p>
<p>##<a href="https://github.com/alibaba/atlas/tree/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo" target="_blank" rel="external">AtlasDemo</a> </p>
<p>###项目运行</p>
<p>安装运行 Demo 配置如下：</p>
<p>app 的 build.gradle 文件中</p>
<p><code>version = getEnvValue(&quot;versionName&quot;,&quot;1.0.0&quot;);</code></p>
<p>AndroidMainfest.xml 文件中</p>
<p><code>android:versionName=&quot;1.0.0&quot;</code></p>
<p>bundle 中的 build.gradle文件中</p>
<p><code>version = &#39;1.0.0&#39;</code></p>
<p>接着运行 shell 脚本 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildApk.sh" target="_blank" rel="external">buildApk.sh </a></p>
<p>构建app，生成 apk 和 ap，同时把 ap 文件发布到本地仓库</p>
<p>此时点击动态部署：</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-42-34.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>点击 Go TO BUNDLEACTIVITY</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-42-46.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>显示的是业务bundle版本号</p>
<p>–</p>
<p>修改配置以及 项目代码(可选)：</p>
<p>app 的 build.gradle 文件中</p>
<p><code>version = getEnvValue(&quot;versionName&quot;,&quot;1.0.1&quot;);</code></p>
<p>AndroidMainfest.xml 文件中</p>
<p><code>android:versionName=&quot;1.0.1&quot;</code></p>
<p>bundle 中的 build.gradle文件中</p>
<p><code>version = &#39;1.0.1&#39;</code></p>
<p>再次执行 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildApk.sh" target="_blank" rel="external">shell</a> 脚本，构建app，生成 apk 和 ap，同时把 ap 文件发布到本地仓库 again</p>
<p>–</p>
<p>最后执行 <a href="https://github.com/alibaba/atlas/blob/master/atlas-demo/%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85%E7%9A%84demo/app/buildTpatch.sh" target="_blank" rel="external">buildTpatch.sh</a> 脚本，重构 apk，生成 patch 包，上传 tpatch</p>
<p>点击动态部署</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-13.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p> 部署成功，重启生效。</p>
<p>其中 <code>./gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1</code> 版本号需要相对应</p>
<p>–</p>
<p>重启app之后,主 Bundle 版本号已经改变，动态部署成功。</p>
<p> <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-23.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p> 点击 Go TO BUNDLEACTIVITY 进入业务 bundle 发现版本号也是发现了变化。</p>
<p>  <img src="http://on9hzfn6s.bkt.clouddn.com/Screenshot_2017-03-22-14-50-29.png" width="300" height="400" alt="Demo图片" align="center"></p>
<p>无需重新安装app就完成了业务代码的修改，这就是动态部署的魅力。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/03/23/%E6%A0%87%E9%A2%98/</url>
      <content type="html"><![CDATA[<p> First Blood</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/03/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
